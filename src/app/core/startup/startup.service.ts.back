/**
 * 系统基础服务
 * 功能： 应用启动时，获取整个系统模块菜单结构， 使用'@delon/theme' 的 MenuService， 构建菜单系统。
 * 从租户管理平台获取租户模块、菜单、 页面颗粒权限列表 。
 * author: Luo Teng Zhan
 * time: 2019/11/1
 */

import { Injectable, Inject } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { zip } from 'rxjs';
import { catchError } from 'rxjs/operators';
import { MenuService, SettingsService, TitleService, ALAIN_I18N_TOKEN } from '@delon/theme';
import { ACLService } from '@delon/acl';
import { TranslateService } from '@ngx-translate/core';
import { I18NService } from '../i18n/i18n.service';

import { NzIconService } from 'ng-zorro-antd';
import { ICONS_AUTO } from '../../../style-icons-auto';
import { ICONS } from '../../../style-icons';
import { CacheService } from '@delon/cache';
import { UserAuthData } from '@shared/utils/interfaces';
import { environment } from '@env/environment';
const { baseUrl } = environment;



/**
 * 用于应用启动时
 * 一般用来获取应用所需要的基础数据等
 */
@Injectable()
export class StartupService {
  constructor(
    iconSrv: NzIconService,
    private menuService: MenuService,
    private translate: TranslateService,
    @Inject(ALAIN_I18N_TOKEN) private i18n: I18NService,
    private settingService: SettingsService,
    private aclService: ACLService,
    private titleService: TitleService,
    private httpClient: HttpClient,
    public cache: CacheService,
  ) {
    iconSrv.addIcon(...ICONS_AUTO, ...ICONS);
    iconSrv.fetchFromIconfont({
      // scriptUrl: 'https://at.alicdn.com/t/font_8d5l8fzk5b87iudi.js',
      // scriptUrl: 'https://at.alicdn.com/t/font_1472314_p0oif2aroap.js',
      scriptUrl: 'https://at.alicdn.com/t/font_1472314_yacsmjjh9w.js',
    });
  }

  // userId:number;
  menuMap = new Map();

  load(): Promise<any> {
    // only works with promises
    // https://github.com/angular/angular/issues/15088
    return new Promise(resolve => {
      zip(
        this.httpClient.get(`assets/tmp/i18n/${this.i18n.defaultLang}.json`),
        this.httpClient.get('assets/tmp/app-data.json'),
      )
        .pipe(
          // 接收其他拦截器后产生的异常消息
          catchError(([langData, appData]) => {
            resolve(null);
            return [langData, appData];
          }),
        )
        .subscribe(
          ([langData, appData]) => {
            // setting language data
            this.translate.setTranslation(this.i18n.defaultLang, langData);
            this.translate.setDefaultLang(this.i18n.defaultLang);
            const  userAuthData: UserAuthData = this.cache.getNone('userAuth');
            // this.userId = userAuthData.orgs[0]["userId"];
            if(userAuthData){
              this.getMenuMap(userAuthData);
              // this.userAuthApp(appData, userAuthData);
            }
            // application data
            const res: any = appData;
            // 应用信息：包括站点名、描述、年份
            this.settingService.setApp(res.app);
            // 用户信息：包括姓名、头像、邮箱地址
            this.settingService.setUser(res.user);
            // ACL：设置权限为全量
            this.aclService.setFull(true);
            // 初始化菜单
            // console.log(res.menu);

            // 设置页面标题的后缀
            this.titleService.default = '';
            this.titleService.suffix = res.app.name;
          },
          () => {},
          () => {
            resolve(null);
          },
        );
    });
  }


  /**
   * 模块菜单生成 getMenuMap
   * @param userAuthData, 租户权限数据， 包含菜单 和 页面颗粒级的权限列表
   * apps 模块列表
   * opts 页面权限列表
   * 菜单构建思路： apps 中有多个模块， 每个模块对应自己的菜单，菜单通过children 层次展示； 页面权限存储在每个菜单中；
   * 菜单分为： 模块级， 父级菜单， 叶子节点菜单
   * traverseMenuTree： 递归生成菜单树
   */
  getMenuMap(userAuthData: UserAuthData){
    const menuList = {};
    if(userAuthData.apps && userAuthData.apps.length){
      // 临时写法， 正常写法：appData.menu[0].children =
      userAuthData.apps.forEach(item => {
        const menu:MenuIn = {
          "text": item.name,
          "i18n": item.objName,
          // "group": true,
          // "hideInBreadcrumb": true,
          "children":[],
        }
        menu.children.push(...this.traverseMenuTree(userAuthData.functions[item.id]));
        menuList[item.objName]= [menu];
      })
    }
    this.cache.remove('menuList');
    this.cache.set('menuList', menuList);
    const menuName:string = this.cache.getNone('menuName');
    if(menuName && Object.keys(menuList).length>0){
      console.log(menuList[menuName]);
      if(menuList[menuName]) this.menuService.add(menuList[menuName]);
    }
  }

  userAuthApp(appData, userAuthData:UserAuthData) {
    appData.user.name = userAuthData.name;
    if(userAuthData.apps && userAuthData.apps.length){
      // 临时写法， 正常写法：appData.menu[0].children =
      appData.menu[0].children.unshift(...this.traverseMenuTree(userAuthData.functions[userAuthData.apps[0].id]));
    }
    console.log('appData.menu====', appData.menu);
  }

  traverseMenuTree(data){
    return data.map(item =>{
      const menu:MenuIn= {
        "text": item.name,
        "i18n": item.objName,
        // "icon": `anticon-${item.icon}`,
        // "icon": `anticon-dashboard`,
        // "icon": { type: 'iconfont', iconfont: 'icondmpjikaguanli' },
        // icon: { type: 'iconfont', iconfont: item.icon},
        "icon": { type: 'img', value: `${baseUrl}/assets/img/idc/menu/${item.icon}`},
        "children":[],
        "data":item,
      }
      if(item.children && item.children.length){
        menu.children = this.traverseMenuTree(item.children);
      }else {
        if(item.objName === 'menu.micromodule'){
          this.cache.set('roomNumber', 202)
          menu.children = [{
            "text": '202房间',
            "i18n": `202${this.i18n.fanyi('app.room')}`,
            "link": '/defalut/visualization/micromodule/202'
            // "link": '/default/visualization/micromodule/202'
            // "icon": `anticon-${item.icon}`,
            // "icon": `anticon-dashboard`,
            // icon: { type: 'iconfont', iconfont: item.icon},
          }];
        }else {
          const index  = item.link.lastIndexOf("/#/");
          if(index!==-1){
            menu.link = item.link.slice(index+3);
            menu.link = `/user/${menu.link}`;
            console.log(menu.link);
          }else {
            menu.link = item.link;
          }
        }
        // delete menu.externalLink;
      }
      return menu;

    })
  }
}



interface MenuIn {
  "text"?: string,
  "objName"?: string,
  "i18n"?:string,
  "icon"?: {},
  "children"?:any,
  "data"?:{},
  "link"?:string,
  "group"?: boolean,
  "hideInBreadcrumb"?: boolean,
}


